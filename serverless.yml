# serverless.yml

service: aqts-retriever-capture-raw-load

provider:
  name: aws
  region: 'us-west-2'
  stage: ${opt:stage, 'TEST'}
  runtime: python3.8
  memorySize: 256
  logRetentionInDays: 30
  deploymentBucket:
    name: iow-cloud-applications
  stackTags:
    "wma:applicationId": "Aquarius TS Retriever Capture Raw Loader"
    "wma:contact": "Jim Kreft jkreft@usgs.gov"
    "wma:environment": ${self:provider.stage}
    "wma:taggingVersion": "0.0.1"

custom:
  accountNumber : ${ssm:/iow/aws/accountNumber}
  vpc:
    securityGroupIds: ${ssm:/iow/retriever-capture/${self:provider.stage}/securityGroupIds~split}
    subnetIds: ${ssm:/iow/aws/vpc/${self:provider.stage}/subnetIds~split}
  db:
    host: ${ssm:/iow/retriever-capture/${self:provider.stage}/database/host}
    credentials: ${ssm:/aws/reference/secretsmanager/NWISWEB-RETRIEVER-CAPTURE-POSTGRES-${self:provider.stage}~true}
    name: "retriever_capture"
  environments:
    TEST: test
    QA: qa
    PROD-EXTERNAL: prod-external
functions:
  iowRetrieverCapture:
    handler: src.load.lambda_handler
    onError:
      Ref: deadLetterQueue
    role: arn:aws:iam::${self:custom.accountNumber}:role/csr-Lambda-Role
    environment:
      DB_HOST: ${self:custom.db.host}
      DB_USER: ${self:custom.db.credentials.user}
      DB_NAME: ${self:custom.db.name}
      DB_PASSWORD: ${self:custom.db.credentials.password}
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
    vpc: ${self:custom.vpc}

resources:
  Resources:
    deadLetterQueue:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: aqts-retrieve-capture-raw-load-dlq-${self:custom.environments.${self:provider.stage}}
        TopicName: aqts-retrieve-capture-raw-load-dlq-${self:custom.environments.${self:provider.stage}}

plugins:
  - serverless-python-requirements

package:
  exclude:
    - node_modules/**
    - Dockerfile
    - .dockerignore
    - Jenkinsfile
    - package.json
    - package-lock.json
